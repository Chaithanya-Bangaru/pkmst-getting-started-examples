/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.prokarma.pkmst.model.ProductDto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.PkmstServerCodegen", date = "2017-11-16T14:15:17.442Z")

@Api(value = "products", description = "the products API")
public interface ProductsApi {

    @ApiOperation(value = "addProduct", notes = "", response = Void.class, tags={ "product-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addProductUsingPOST(@ApiParam(value = "productVo" ,required=true )   @RequestBody ProductDto productVo, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "deleteProduct", notes = "", response = Void.class, tags={ "product-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/products/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProductUsingDELETE(@ApiParam(value = "id",required=true ) @PathVariable("id") Long id, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "getProductsByTypeAndName", notes = "", response = ProductDto.class, responseContainer = "List", tags={ "product-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products/searchbyIds",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<ProductDto>> getProductsByTypeAndNameUsingGET(@ApiParam(value = "productIds", required = true)  @RequestParam(value = "productIds", required = true) String productIds, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "getProducts", notes = "", response = ProductDto.class, responseContainer = "List", tags={ "product-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<ProductDto>> getProductsUsingGET( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
