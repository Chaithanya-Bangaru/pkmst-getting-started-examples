/*
 * Car CRUD(JPA) operations
 * This is about CRUD operations of Car using JPA created by Swagger.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Iterator;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.Car;
import com.prokarma.pkmst.model.CarRepository;

/**
 * API tests for CarApi
 */
public class CarApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @InjectMocks
    private final CarApi api = new CarApiController(objectMapper);
    
    private CarRepository carRepository;

    private final String accept = "application/json";
    
    @Before
    public void setUp() {
    	carRepository = mock(CarRepository.class);
        MockitoAnnotations.initMocks(this);
        
    }

    @Test
    public void createCarTest() throws Exception {
        Car body = mock(Car.class);
        api.createCar(body , accept);
        verify(carRepository).save(any(Car.class));

    }
    
    @Test
    public void createCarsWithArrayInputTest() throws Exception {
    	Car newCar = mock(Car.class);
    	Iterator<Car> itr = mock(Iterator.class);
        when(itr.next()).thenReturn(newCar);
        when(itr.hasNext()).thenReturn(true, false);
          

        List<Car> mockCarsList = Mockito.mock(List.class);
        when(mockCarsList.iterator()).thenReturn(itr);
        api.createCarsWithArrayInput(mockCarsList , accept);
        verify(carRepository).save(any(Car.class));

    }
    
    @Test
    public void deleteCarTest() throws Exception {
    	String vinNumber = "v101";
    	Car deleteCar = mock(Car.class);
    	when(deleteCar.getId()).thenReturn(101L);
    	when(carRepository.findByVinNumber(vinNumber)).thenReturn(deleteCar);
    	
        api.deleteCar(vinNumber , accept);
        verify(carRepository).delete(any(Long.class));

    }
    
    @Test
    public void getCarByVinNumberTest() throws Exception {
        String vinNumber = "v101";
        Car carInfo = mock(Car.class);
        when(carInfo.getId()).thenReturn(101L);
    	when(carRepository.findByVinNumber(vinNumber)).thenReturn(carInfo);
    	api.getCarByVinNumber(vinNumber , accept);
    	verify(carRepository).findByVinNumber(any(String.class));
    }
    
    @Test
    public void updateCarTest() throws Exception {
    	String vinNumber = "v101";
    	Car updateCarInfo = mock(Car.class);
        api.updateCar(vinNumber, updateCarInfo , accept);
        verify(carRepository).save(any(Car.class)); 
    }
    
    @Test
    public void allCarsTest() throws Exception {
    	api.allCars(accept);
        verify(carRepository).findAll(); 
    }
    
}
